on: push

jobs:
  get-branch:
    name: Get branch name
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get tag name
        id: vars
        run: |
            if [ ${GITHUB_REF#refs/*/} == "master" ]
            then
              echo ::set-output name=tag::latest
            else
              echo ::set-output name=tag::${GITHUB_REF#refs/*/}
            fi

  check-version-number:
    name: Check version numbers
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install PyGitHub
        run: pip3 install PyGitHub
      - name: Debug branch name
        run: echo ${GITHUB_REF#refs/heads/}
      - name: Check and update version numbers
        run: python3 .github/scripts/update_version_number.py ${{ secrets.bemppbot_github_token }} ${GITHUB_REF#refs/heads/}

  build-and-publish-docker:
    name: Build and publish testing environment docker image
    runs-on: ubuntu-latest
    needs: get-branch
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Make cache folder
        run: mkdir ~/cache
      - name: Cache Dockerfile
        id: cache-docker
        uses: actions/cache@v2
        with:
          path: ~/cache/Dockerfile
          key: ${{ runner.os }}-Dockerfile-${{ needs.get-branch.outputs.tag//\/_}}-${{ hashFiles('Dockerfile') }}
      - name: touch ~/cache/Dockerfile
        run: touch ~/cache/Dockerfile
      - name: compare Dockerfile with cache
        id: diff
        run: |
            if diff Dockerfile ~/cache/Dockerfile > /dev/null; then
                echo ::set-output name=changed::no
            else
                echo ::set-output name=changed::yes
            fi
      - name: Copy Dockerfile to ~/cache/Dockerfile
        run: cp Dockerfile ~/cache/Dockerfile

      - name: Build and push testing Docker image with exafmm
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: bempp/cl-dev-env
          tags: ${{ needs.get-branch.outputs.tag//\/_ }}
          target: bempp-dev-env-with-exafmm
          cache_froms: bempp/cl-dev-env
        if: steps.diff.outputs.changed == 'yes'
  
  style-checks:
    name: Run style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get install -y python3-setuptools
      - run: pip3 install black>=20.8
      - run: pip3 install pydocstyle flake8
      - run: |
            python3 -m flake8 bempp
            python3 -m flake8 test
        name: Run flake8 checks
      - run: python3 -m pydocstyle bempp/api
        name: Run pydocstyle checks
      - run: | 
            python3 -m black --line-length 88 --check bempp
        name: Run black checks in bempp
      - run: | 
            python3 -m black --line-length 88 --check test
        name: Run black checks on tests
      - run: | 
            python3 -m black --line-length 88 --check .github/scripts
        name: Run black checks on CI scripts

  build-and-test-with-exafmm:
    name: Build Bempp and run tests
    needs:
      - build-and-publish-docker
      - get-branch
    runs-on: ubuntu-latest
    container: bempp/cl-dev-env:${{ needs.get-branch.outputs.tag//\/_ }}
    steps:
      - uses: actions/checkout@v2
      - run: python3 setup.py install
        name: Install Bempp
      - run: python3 -m pytest --durations=50 test/unit
        name: Run Bempp unit tests

