name: Run tests and style checks

on: push

jobs:
  check-version-number:
    name: Check version numbers
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Install PyGitHub
        run: pip3 install PyGitHub
      - name: Check and update version numbers
        run: python3 .github/scripts/update_version_number.py ${{ secrets.bemppbot_github_token }} ${GITHUB_REF#refs/heads/}

  build-and-publish-docker:
    name: Build and publish testing environment docker image
    runs-on: ubuntu-latest
    outputs:
      dockertag: ${{ steps.dockertag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get main branch
        run: git clone https://github.com/bempp/bempp-cl.git bempp-main
      - name: Go back a commit
        run: |
          cd bempp-main
          git reset HEAD~1
          git stash
          cd ..
        if: github.ref == 'refs/heads/main'
      - name: Get old Dockerfile
        run: |
          cp bempp-main/Dockerfile Dockerfile.old
          rm -rf bempp-main
      - name: compare Dockerfile with old Dockerfile
        id: diff
        run: |
            if diff Dockerfile Dockerfile.old > /dev/null; then
                echo ::set-output name=changed::no
            else
                echo ::set-output name=changed::yes
            fi

      - name: set Docker tag
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo ::set-output name=tag::main
          elif [ "${{ steps.diff.outputs.changed }}" = "yes" ]; then
              the_tag=($(echo "${{ github.ref }}" | sha1sum))
              echo ::set-output name=tag::$the_tag
          else
              echo ::set-output name=tag::main
          fi
        id: dockertag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        if: steps.diff.outputs.changed == 'yes'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        if: steps.diff.outputs.changed == 'yes'
      - name: Build and push testing Docker image with dolfinx
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: bempp/cl-dev-env-with-dolfinx:${{ steps.dockertag.outputs.tag }}
          target: bempp-dev-env-with-dolfinx
        if: steps.diff.outputs.changed == 'yes'
      - name: Build and push testing Docker image with dolfin
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: bempp/cl-dev-env-with-dolfin:${{ steps.dockertag.outputs.tag }}
          target: bempp-dev-env-with-dolfin
        if: steps.diff.outputs.changed == 'yes'
      - name: Build and push testing Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: bempp/cl-dev-env:${{ steps.dockertag.outputs.tag }}
          target: bempp-dev-env
        if: steps.diff.outputs.changed == 'yes'

  style-checks:
    name: Run style checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
            sudo apt-get install -y python3-setuptools
            pip3 install pydocstyle flake8
        name: Install Python style tools
      - run: |
            python3 -m flake8 bempp
            python3 -m flake8 test
            python3 -m flake8 .github/scripts
        name: Run flake8 checks
      - run: python3 -m pydocstyle bempp/api
        name: Run pydocstyle checks

  build-and-test-with-dolfin:
    name: Build Bempp and run tests with DOLFIN
    needs:
      - build-and-publish-docker
      - style-checks
    runs-on: ubuntu-latest
    container: bempp/cl-dev-env-with-dolfin:${{ needs.build-and-publish-docker.outputs.dockertag }}
    steps:
      - uses: actions/checkout@v2
      - run: python3 setup.py install
        name: Install Bempp
      - run: python3 -m pytest -n4 --durations=50 test/unit --has-dolfin 1 --has-dolfinx 0 --has-exafmm 1
        name: Run Bempp unit tests

  build-and-test-with-dolfinx:
    name: Build Bempp and run tests with DOLFINx
    needs:
      - build-and-publish-docker
      - style-checks
    runs-on: ubuntu-latest
    container: bempp/cl-dev-env-with-dolfinx:${{ needs.build-and-publish-docker.outputs.dockertag }}
    steps:
      - uses: actions/checkout@v2
      - run: python3 setup.py install
        name: Install Bempp
      - run: python3 -m pytest -n4 --durations=50 test/unit --has-dolfin 0 --has-dolfinx 1 --has-exafmm 1
        name: Run Bempp unit tests

